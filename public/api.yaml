openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
  description: Documentation de l'API pour la gestion des utilisateurs, clients et articles.

servers:
  - url: /wane/v1
    description: API Server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Client:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        phone:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Article:
      type: object
      properties:
        id:
          type: integer
        libelle:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

paths:
  /users:
    get:
      summary: Liste des utilisateurs
      operationId: listUsers
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Liste des utilisateurs récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

    post:
      summary: Créer un utilisateur
      operationId: createUser
      security:
        - BearerAuth: []
      responses:
        "201":
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/{id}:
    get:
      summary: Récupérer un utilisateur
      operationId: getUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Utilisateur récupéré avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Utilisateur introuvable

    put:
    patch:
      summary: Mettre à jour un utilisateur
      operationId: updateUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Utilisateur mis à jour avec succès

    delete:
      summary: Supprimer un utilisateur
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Utilisateur supprimé avec succès

  /clients:
    get:
      summary: Liste des clients
      operationId: listClients
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Liste des clients récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Client"

    post:
      summary: Créer un client
      operationId: createClient
      security:
        - BearerAuth: []
      responses:
        "201":
          description: Client créé avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"

  /clients/{id}:
    get:
      summary: Récupérer un client
      operationId: getClient
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Client récupéré avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "404":
          description: Client introuvable

    put:
    patch:
      summary: Mettre à jour un client
      operationId: updateClient
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Client mis à jour avec succès

    delete:
      summary: Supprimer un client
      operationId: deleteClient
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Client supprimé avec succès

  /articles:
    get:
      summary: Liste des articles
      operationId: listArticles
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Liste des articles récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Article"

    post:
      summary: Créer un article
      operationId: createArticle
      security:
        - BearerAuth: []
      responses:
        "201":
          description: Article créé avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"

  /articles/{id}:
    get:
      summary: Récupérer un article
      operationId: getArticle
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Article récupéré avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
        "404":
          description: Article introuvable

    patch:
      summary: Mettre à jour un article
      operationId: updateArticle
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Article mis à jour avec succès

    delete:
      summary: Supprimer un article
      operationId: deleteArticle
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Article supprimé avec succès

  /login:
    post:
      summary: Connexion
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: "durgan.maribel"
                password:
                  type: string
                  example: "password"
              required:
                - login
                - password
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMjM0NTY3ODkwIiwiaWF0IjoxNTYyMzkwMjYifQ.S0U1Q0IgT2b3lPo-8TEgQQW65KrHJ7Utb99Kn9E8z7s"
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      login:
                        type: string
                        example: "durgan.maribel"
                      name:
                        type: string
                        example: "Durgan Maribel"
                required:
                  - token
                  - user
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

  /register:
    post:
      summary: Inscription
      operationId: register
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nom:
                  type: string
                  example: "Doe"
                prenom:
                  type: string
                  example: "John"
                login:
                  type: string
                  example: "john.doe"
                password:
                  type: string
                  example: "password123"
                password_confirmation:
                  type: string
                  example: "password123"
                role_id:
                  type: integer
                  example: 2
                client_id:
                  type: integer
                  example: 1
                active:
                  type: boolean
                  example: true
                photo:
                  type: string
                  format: binary
              required:
                - nom
                - prenom
                - login
                - password
                - password_confirmation
                - role_id
                - client_id
                - active
                - photo
      responses:
        "200":
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      nom:
                        type: string
                        example: "Doe"
                      prenom:
                        type: string
                        example: "John"
                      login:
                        type: string
                        example: "john.doe"
                      role_id:
                        type: integer
                        example: 2
                      active:
                        type: boolean
                        example: true
                      photo:
                        type: string
                        example: "1632977123.jpg"
                  client:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      user_id:
                        type: integer
                        example: 1
                      other_client_data:
                        type: string
                        example: "Additional client data"
                required:
                  - user
                  - client
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error during registration"

  /refresh:
    get:
      summary: Rafraîchir le token
      operationId: refresh
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Token rafraîchi avec succès

  /getAuthUser:
    get:
      summary: Récupérer l'utilisateur authentifié
      operationId: getAuthUser
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Utilisateur authentifié récupéré avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
